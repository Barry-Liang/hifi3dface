
In my cae, the tensorflow_framework library file's name was not libtensorflow_framework.so but libtensorflow_framework.so.1. The tensorflow version is 1.15.0.

I just made symbolic link for it and the problem has gone.

$ cd /anaconda3/envs/3dface/lib/python3.6/site-packages/tensorflow_core
$ ln -s libtensorflow_framework.so.1 libtensorflow_framework.so


./optimization/rgbd/step2_sparse_fusion.py
from utils.ply import write_ply, write_obj ----> from third_party.ply import write_ply, write_obj



./optimization/rgbd/step3_prefit_shape.py
from utils.ply import write_ply ----> from third_party.ply import write_ply


./optimization/rgbd/step4B_prefit_bfm_rgb.py
from utils.ply import write_ply, write_obj ----> from third_party.ply import write_ply, write_obj



sh run_opt_rgbd.sh   --->   bash run_opt_rgbd.sh      

### sh command causes problems when encounter [ symbol or == in the .sh file.

If your g++ version is greater than 4, please delete "-D_GLIBCXX_USE_CXX11_ABI=0" ( Line 9 ) in install.sh. 


#!/bin/bash
echo "compiling rasterizer"
TF_INC=/home/haoxianzhang/anaconda3/envs/py36tf18_tl/lib/python3.6/site-packages/tensorflow/include
TF_LIB=/home/haoxianzhang/anaconda3/envs/py36tf18_tl/lib/python3.6/site-packages/tensorflow
# you might need the following to successfully compile the third-party library
tf_mesh_renderer_path=$(pwd)/third_party/kernels/
g++ -std=c++11 \
    -shared $tf_mesh_renderer_path/rasterize_triangles_grad.cc $tf_mesh_renderer_path/rasterize_triangles_op.cc $tf_mesh_renderer_path/rasterize_triangles_impl.cc $tf_mesh_renderer_path/rasterize_triangles_impl.h \
    -o $tf_mesh_renderer_path/rasterize_triangles_kernel.so -fPIC -D_GLIBCXX_USE_CXX11_ABI=0 \
    -I$TF_INC -L$TF_LIB -ltensorflow_framework -O2

if [ "$?" -ne 0 ]; then echo "compile rasterizer failed"; exit 1; fi


This error can be solved by installing the tensorflow-gpu=1.15 by pip(overwrite) instead of conda.
